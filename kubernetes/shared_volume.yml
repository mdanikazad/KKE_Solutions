#############################################Problem Statement #######################################################
# Kubernetes-Shared-Volumes 
# We are working on an application that will be deployed on multiple containers within a pod on Kubernetes cluster. There is a requirement to share a volume among the containers to save some temporary data. The Nautilus DevOps team is developing a similar template to replicate the scenario. Below you can find more details about it. 
# Create a pod named volume-share-devops. 
# For first container, use image debian with latest tag only and remember to mention tag i.e debian:latest, container should be named as volume-container-devops-1, and run a command '/bin/bash', '-c' and 'sleep 10000'. Volume volume-share should be mounted at path /tmp/official. 
# For second container, use image debian with latest tag only and remember to mention tag i.e debian:latest, container should be named as volume-container-devops-2, and run a command '/bin/bash', 'c' and 'sleep 10000'. Volume volume-share should be mounted at path /tmp/cluster. 
# Volumes to be named as volume-share and use emptyDir: { }. 
# After creating pods, exec into the first container volume-container-devops-1, and create a file official.txt with content Welcome to xFusionCorp Industries! under the mount path of first container i.e /tmp/official. 
# The file official.txt should be present under the mounted path /tmp/cluster of second container volume-container-devops-2 as they are using shared volumes. 
# Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster. 
#######################################################################################################################


################################################# Commands ############################################################
Step 1: kubectl create -f 
Step 2: Wait for the pod to be in running state 
Step 3: Get a shell to the first container in the pod: 
kubectl exec -it --container -- /bin/bash
Step 4: In the resulting prompt, create a text file as per the question:
echo "Welcome to xFusionCorp Industries!" > /tmp/ecommerce/ecommerce.txt
Step 5: Verify: Check that you are able to see this file in the second container
under corresponding volume mount path as they use shared volumes:
kubectl exec -it --container -- /bin/bash
cat /tmp/apps/ecommerce.txt

########################################################################################################################


apiVersion: v1
kind: Pod
metadata:
  name: volume-share-devops
  labels:
    name: myapp
spec:
  volumes:
    - name: volume-share
      emptyDir: {}
  containers:
    - name: volume-container-devops-1
      image: centos:latest
      command: ["/bin/bash", "-c", "sleep 10000"]
      volumeMounts:
        - name: volume-share
          mountPath: /tmp/ecommerce
    - name: volume-container-devops-2
      image: centos:latest
      command: ["/bin/bash", "-c", "sleep 10000"]
      volumeMounts:
        - name: volume-share
          mountPath: /tmp/apps
